{"version":3,"sources":["webpack:///./src/components/Features.js","webpack:///./src/templates/index-page.js","webpack:///./src/components/BlogRoll.js"],"names":["FeatureGrid","gridItems","className","map","item","key","text","style","width","display","PreviewCompatibleImage","imageInfo","IndexPageTemplate","image","title","mainpitch","heading","intro","backgroundImage","childImageSharp","fluid","src","backgroundPosition","backgroundAttachment","height","lineHeight","justifyContent","alignItems","flexDirection","boxShadow","backgroundColor","color","padding","description","Features","blurbs","BlogRoll","to","IndexPage","frontmatter","data","markdownRemark","Layout","render","posts","this","props","allMarkdownRemark","edges","post","node","id","featuredpost","featuredimage","alt","fields","slug","date","excerpt","React","Component","query","count"],"mappings":"oNAmCeA,EA/BK,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAClB,yBAAKC,UAAU,wBACZD,EAAUE,KAAI,SAACC,GAAD,OACb,yBAAKC,IAAKD,EAAKE,KAAMJ,UAAU,eAC7B,6BAASA,UAAU,WACjB,yBAAKA,UAAU,qBACb,yBACEK,MAAO,CACLC,MAAO,QACPC,QAAS,iBAGX,kBAACC,EAAA,EAAD,CAAwBC,UAAWP,MAGvC,2BAAIA,EAAKE,a,YCXNM,EAAoB,SAAC,GAAD,IAC/BC,EAD+B,EAC/BA,MACAC,EAF+B,EAE/BA,MAEAC,GAJ+B,EAG/BC,QAH+B,EAI/BD,WACAE,EAL+B,EAK/BA,MAL+B,OAO/B,6BACE,yBACEf,UAAU,gCACVK,MAAO,CACLW,gBAAgB,QACZL,EAAMM,gBAAkBN,EAAMM,gBAAgBC,MAAMC,IAAMR,GAD/C,IAGfS,mBAAmB,WACnBC,qBAAqB,UAGvB,yBACEhB,MAAO,CACLE,QAAS,OACTe,OAAQ,QACRC,WAAY,IACZC,eAAgB,eAChBC,WAAY,OACZC,cAAe,WAGjB,wBACE1B,UAAU,8EACVK,MAAO,CACLsB,UACE,kEACFC,gBAAiB,kBACjBC,MAAO,QACPN,WAAY,IACZO,QAAS,WAGVlB,KAIP,6BAASZ,UAAU,6BACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,SAASa,EAAUD,QAEnC,yBAAKZ,UAAU,QACb,wBAAIA,UAAU,YAAYa,EAAUkB,eAGxC,kBAACC,EAAD,CAAUjC,UAAWgB,EAAMkB,SAC3B,yBAAKjC,UAAU,gBACb,wBAAIA,UAAU,sCAAd,uBAGA,kBAACkC,EAAA,EAAD,MACA,yBAAKlC,UAAU,kCACb,kBAAC,IAAD,CAAMA,UAAU,MAAMmC,GAAG,SAAzB,wBAkDLC,UAzBG,SAAC,GAAc,IACvBC,EADsB,EAAXC,KACUC,eAArBF,YAER,OACE,kBAACG,EAAA,EAAD,KACE,kBAAC,EAAD,CACE7B,MAAO0B,EAAY1B,MACnBC,MAAOyB,EAAYzB,MACnBE,QAASuB,EAAYvB,QACrBD,UAAWwB,EAAYxB,UACvBkB,YAAaM,EAAYN,YACzBhB,MAAOsB,EAAYtB,W,iGCvGrBmB,E,kGACJO,OAAA,WAAU,IAEOC,EADEC,KAAKC,MAAdN,KACsBO,kBAAtBC,MAER,OACE,yBAAK9C,UAAU,wBACZ0C,GACCA,EAAMzC,KAAI,gBAAS8C,EAAT,EAAGC,KAAH,OACR,yBAAKhD,UAAU,wBAAwBG,IAAK4C,EAAKE,IAC/C,6BACEjD,UAAS,kDACP+C,EAAKV,YAAYa,aAAe,cAAgB,KAGlD,gCACGH,EAAKV,YAAYc,cAChB,yBAAKnD,UAAU,sBACb,kBAAC,IAAD,CACES,UAAW,CACTE,MAAOoC,EAAKV,YAAYc,cACxBC,IAAI,qCAAsCL,EAAKV,YAAYzB,UAI/D,KACJ,uBAAGZ,UAAU,aACX,kBAAC,IAAD,CACEA,UAAU,mCACVmC,GAAIY,EAAKM,OAAOC,MAEfP,EAAKV,YAAYzB,OAEpB,qCACA,0BAAMZ,UAAU,+BACb+C,EAAKV,YAAYkB,QAIxB,2BACGR,EAAKS,QACN,6BACA,6BACA,kBAAC,IAAD,CAAMxD,UAAU,SAASmC,GAAIY,EAAKM,OAAOC,MAAzC,iC,GA3CKG,IAAMC,WA+Dd,sBACb,kBAAC,IAAD,CACEC,MAAK,aA+BLlB,OAAQ,SAACH,EAAMsB,GAAP,OAAiB,kBAAC1B,EAAD,CAAUI,KAAMA,EAAMsB,MAAOA","file":"component---src-templates-index-page-js-5338e72b85c2c6ca10cd.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\n\nconst FeatureGrid = ({ gridItems }) => (\n  <div className=\"columns is-multiline\">\n    {gridItems.map((item) => (\n      <div key={item.text} className=\"column is-6\">\n        <section className=\"section\">\n          <div className=\"has-text-centered\">\n            <div\n              style={{\n                width: '240px',\n                display: 'inline-block',\n              }}\n            >\n              <PreviewCompatibleImage imageInfo={item} />\n            </div>\n          </div>\n          <p>{item.text}</p>\n        </section>\n      </div>\n    ))}\n  </div>\n)\n\nFeatureGrid.propTypes = {\n  gridItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n      text: PropTypes.string,\n    })\n  ),\n}\n\nexport default FeatureGrid\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport Features from '../components/Features'\nimport BlogRoll from '../components/BlogRoll'\n\nexport const IndexPageTemplate = ({\n  image,\n  title,\n  heading,\n  mainpitch,\n  intro,\n}) => (\n  <div>\n    <div\n      className=\"full-width-image margin-top-0\"\n      style={{\n        backgroundImage: `url(${\n          !!image.childImageSharp ? image.childImageSharp.fluid.src : image\n        })`,\n        backgroundPosition: `top left`,\n        backgroundAttachment: `fixed`,\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          height: '150px',\n          lineHeight: '1',\n          justifyContent: 'space-around',\n          alignItems: 'left',\n          flexDirection: 'column',\n        }}\n      >\n        <h1\n          className=\"has-text-weight-bold is-size-3-mobile is-size-2-tablet is-size-1-widescreen\"\n          style={{\n            boxShadow:\n              'rgb(7, 67, 103) 0.5rem 0px 0px, rgb(7, 67, 103) -0.5rem 0px 0px',\n            backgroundColor: 'rgb(7, 67, 103)',\n            color: 'white',\n            lineHeight: '1',\n            padding: '0.25em',\n          }}\n        >\n          {title}\n        </h1>\n      </div>\n    </div>\n    <section className=\"section section--gradient\">\n      <div className=\"container\">\n        <div className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column is-10 is-offset-1\">\n              <div className=\"content\">\n                <div className=\"content\">\n                  <div className=\"tile\">\n                    <h1 className=\"title\">{mainpitch.title}</h1>\n                  </div>\n                  <div className=\"tile\">\n                    <h3 className=\"subtitle\">{mainpitch.description}</h3>\n                  </div>\n                </div>\n                <Features gridItems={intro.blurbs} />\n                <div className=\"column is-12\">\n                  <h3 className=\"has-text-weight-semibold is-size-2\">\n                    Najnovšie príspevky\n                  </h3>\n                  <BlogRoll />\n                  <div className=\"column is-12 has-text-centered\">\n                    <Link className=\"btn\" to=\"/blog\">\n                      Čítať viac\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n)\n\nIndexPageTemplate.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  heading: PropTypes.string,\n  mainpitch: PropTypes.object,\n  description: PropTypes.string,\n  intro: PropTypes.shape({\n    blurbs: PropTypes.array,\n  }),\n}\n\nconst IndexPage = ({ data }) => {\n  const { frontmatter } = data.markdownRemark\n\n  return (\n    <Layout>\n      <IndexPageTemplate\n        image={frontmatter.image}\n        title={frontmatter.title}\n        heading={frontmatter.heading}\n        mainpitch={frontmatter.mainpitch}\n        description={frontmatter.description}\n        intro={frontmatter.intro}\n      />\n    </Layout>\n  )\n}\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query IndexPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            fluid(maxWidth: 2048, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        heading\n        mainpitch {\n          title\n          description\n        }\n        description\n        intro {\n          blurbs {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 240, quality: 64) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            text\n          }\n          heading\n          description\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql, StaticQuery } from 'gatsby'\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\n\nclass BlogRoll extends React.Component {\n  render() {\n    const { data } = this.props\n    const { edges: posts } = data.allMarkdownRemark\n\n    return (\n      <div className=\"columns is-multiline\">\n        {posts &&\n          posts.map(({ node: post }) => (\n            <div className=\"is-parent column is-6\" key={post.id}>\n              <article\n                className={`blog-list-item tile is-child box notification ${\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\n                }`}\n              >\n                <header>\n                  {post.frontmatter.featuredimage ? (\n                    <div className=\"featured-thumbnail\">\n                      <PreviewCompatibleImage\n                        imageInfo={{\n                          image: post.frontmatter.featuredimage,\n                          alt: `featured image thumbnail for post ${post.frontmatter.title}`,\n                        }}\n                      />\n                    </div>\n                  ) : null}\n                  <p className=\"post-meta\">\n                    <Link\n                      className=\"title has-text-primary is-size-4\"\n                      to={post.fields.slug}\n                    >\n                      {post.frontmatter.title}\n                    </Link>\n                    <span> &bull; </span>\n                    <span className=\"subtitle is-size-5 is-block\">\n                      {post.frontmatter.date}\n                    </span>\n                  </p>\n                </header>\n                <p>\n                  {post.excerpt}\n                  <br />\n                  <br />\n                  <Link className=\"button\" to={post.fields.slug}>\n                    Pokračovať v čítaní →\n                  </Link>\n                </p>\n              </article>\n            </div>\n          ))}\n      </div>\n    )\n  }\n}\n\nBlogRoll.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array,\n    }),\n  }),\n}\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query BlogRollQuery {\n        allMarkdownRemark(\n          sort: { order: DESC, fields: [frontmatter___date] }\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\n        ) {\n          edges {\n            node {\n              excerpt(pruneLength: 400)\n              id\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n                templateKey\n                date(formatString: \"DD.MM.YYYY\")\n                featuredpost\n                featuredimage {\n                  childImageSharp {\n                    fluid(maxWidth: 120, quality: 100) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(data, count) => <BlogRoll data={data} count={count} />}\n  />\n)\n"],"sourceRoot":""}